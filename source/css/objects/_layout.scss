/*------------------------------------*\
		$LAYOUT
\*------------------------------------*/

// Layout Containers
.lc {
	max-width: $max-width;
	margin: 0 auto;
	position: relative;
	padding-left: $pad;
	padding-right: $pad;
	@include mq($medium-break) {
		.nav-toggler {
			left: $pad;
		}
		.search-toggler {
			right: $pad;
		}
	}
	@include mq($large-break) {
		padding-left: $pad-and-half;
		padding-right: $pad-and-half;
		.nav-toggler {
			left: $pad-and-half;
		}
		.search-toggler {
			right: $pad-and-half;
		}
	}
}
.lc-inner { // To be used in conjunction with .lc
	max-width: $inner-max-width;
}
.lc-inner--l {
	@include center-block;
	max-width: $inner-max-width-large;
}
.lc-inner--m {
	@include center-block;
	max-width: $inner-max-width-medium;
}
.narrow {
	max-width: rem(600);
	@include center-block;
}

.pad {
	@include rem(padding, 16);
}

/*------------------------------------*\
		$TEMPLATES
\*------------------------------------*/

/* Two Column Layout */
.l-two-col {
	@extend .cf;

	.l-main {
		@media all and (min-width: $bp-large) {
			float: left;
			width: 70%;
			padding-right: $pad;
		}
	}

	.l-sidebar {
		@media all and (max-width: $bp-large) {
			clear: both;
		}

		@media all and (min-width: $bp-large) {
			float: left;
			width: 30%;
			padding: 0 0 0 $pad;
		}
	}
}

// Fluid left content column with static right rail
.primary {
	width: 100%;
	margin-bottom: $space;
	padding-bottom: $pad;
	@include mq($medium-break) {
		float: left;
		margin-right: rem(-$sidebar-width - 50);
	}
	@include mq($large-break) {
		margin-right: rem(-$sidebar-width - 80);
	}
	@include mq($larger-break) {
		margin-right: rem(-$sidebar-width - 94);
	}
}
.primary-inner {
	padding-bottom: $pad;
	@include mq($medium-break) {
		margin-right: rem($sidebar-width + 50);
	}
	@include mq($large-break) {
		margin-right: rem($sidebar-width + 80);
	}
	@include mq($larger-break) {
		margin-right: rem($sidebar-width + 94);
	}
}
.secondary {
	max-width: rem(650);
	@include center-block;
	@include mq($medium-break) {
		float: right;
		width: rem($sidebar-width);
	}
}

// Wide left column, and static width right column.
.shift-left {
	width: 100%;
	@include mq($medium-break) {
		float: left;
		margin-right: rem(-$sidebar-width);
	}
}
.shift-left-inner {
	@include mq($medium-break) {
		margin-right: rem($sidebar-width + 20);
	}
	@include mq($px1200) {
		margin-right: rem($sidebar-width + 40);
	}
}
.shift-right {
	position: relative;
	z-index: 10;
	@include mq($medium-break) {
		float: right;
		width: rem($sidebar-width);
	}
}


/*------------------------------------*\
		$GRIDS
\*------------------------------------*/

/* Grid Container */
.g {
	overflow: hidden;
	margin: 0 (-$pad-half);
}

/* Grid Item */
.gi {
	padding: $pad-half;
	img {
		display: block;
	}
	@media all and (min-width: $bp-med) {
		float: left;
	}
}

/* Grid 1up */
.g-1up {
	.gi {
		width: 100%;
	}
}

/* Grid 2up */
.g-2up {
	@media all and (min-width: $bp-med) {
		> .gi {
			float: left;
			width: 50%;
			&:nth-of-type(odd) {
				clear: left;
			}
		}
	}
}

/* Grid Half (Always displayed side by side) */
.g-half {
	// Layout: [][]
	> .gi {
		float: left;
		width: 50%;
		&:nth-of-type(odd) {
			clear: left;
		}
	}
}

/* Grid 3up */
.g-3up {
	// Layout:
	// []
	// []
	// []
	.b-title {
		@include mq($px600, max) {
			font-size: rem(18);
		}
	}
	@media all and (min-width: $px400) {
		// Layout: [][][]
		> .gi {
			float: left;
			width: 50%;
			width: 33.3333333%;
		}
	}
}

// Grid 3up version 2 - instead of going from i column to 2 columns, this adds
// a middle breakpoint for 2 at top and one below centered.
.g-3up-v2 {
	// Layout:
	// []
	// []
	// []
	text-align: center;
	.b-title {
		@media (max-width: $px600), (min-width: $medium-break) and (max-width: $px900), (min-width: $large-break)  {
			font-size: rem(25);
		}
	}
	@media (min-width: $px400) and (max-width: $px600), (min-width: $medium-break) and (max-width: $px900) {
		// Layout:
		// [][]
		//  []
		> .gi {
			display: inline-block;
			width: 49%;
			float: none;
		}
	}
	@media (min-width: $px600) and (max-width: $medium-break), (min-width: $px900)  {
		// Layout: [][][]
		> .gi {
			float: left;
			width: 33.3333333%;
		}
	}
}

// Grid 4up
.g-4up {
	@include g-4up;
}

// Grid 4up with custom breakpoints
.g-4up-v2 {
	@include g-4up($micro-break, $larger-break);
}

// Used for grid items that break into 4 across at smaller widths.
.g-4up-early-break {
	@include g-4up-early-break;
}

/* Grid 5up */
.g-5up {
	> .gi {
		float: left;
		width: 50%;
		&:nth-of-type(2n+1) {
			clear: both;
		}
		&:last-child {
			width: 100%;
		}
	}
	@include mq($px550) {
		> .gi {
			float: left;
			width: 33.3333%;
			&:nth-of-type(2n+1) {
				clear: none;
			}
			&:nth-of-type(4) {
				clear: left;
			}
			&:last-child {
				width: 33.3333%;
			}
		}
	}
	@include mq($medium-break) {
		> .gi {
			width: 20%;
			&:nth-of-type(2n+1),
			&:nth-of-type(4) {
				clear: none;
			}
			&:last-child {
				width: 20%;
			}
		}
	}
}

/* Grid Quarter (Always displayed side by side) */
.g-quarter {
	> .gi {
		float: left;
		width: 24%;

		&:nth-of-type(4n+1) {
			clear: left;
		}
	}
}

.g-max4 {

	@media all and (min-width: $bp-small-2) {
		>.gi {
			float: left;
			width: 50%;

			&:nth-of-type(2n+1) {
				clear: both;
			}
		}
	}

	@media all and (min-width: $bp-small-3) {
		>.gi {
			width: 33.3333333%;

			&:nth-of-type(2n+1) {
				clear: none;
			}

			&:nth-of-type(3n+1) {
				clear: left;
			}
		}
	}

	@media all and (min-width: $bp-large) {
		>.gi {
			width: 25%;

			&:nth-of-type(3n+1) {
				clear: none;
			}

			&:nth-of-type(4n+1) {
				clear: left;
			}
		}
	}
}

/* Grid 5up */
.g-max5 {

	>.gi {
		float: left;
		width: 50%;

		&:nth-of-type(2n+1) {
			clear: both;
		}
	}

	@media all and (min-width: $bp-small-3) {
		>.gi {
			width: 33.3333333%;

			&:nth-of-type(2n+1) {
				clear: none;
			}

			&:nth-of-type(3n+1) {
				clear: left;
			}
		}
	}

	@media all and (min-width: $bp-med) {
		>.gi {
			width: 25%;

			&:nth-of-type(3n+1) {
				clear: none;
			}

			&:nth-of-type(4n+1) {
				clear: left;
			}
		}
	}

	@media all and (min-width: $bp-med-2) {
		>.gi {
			width: 20%;

			&:nth-of-type(4n+1) {
				clear: none;
			}

			&:nth-of-type(5n+1) {
				clear: left;
			}
		}
	}
}

/* Grid 2/3 */
.gi-2-3 {
	@media all and (min-width: $bp-med) {
		float: left;
		width: 66.666666%;
	}
}

.gi-1-3 {
	@media all and (min-width: $bp-med) {
		float: left;
		width: 33.333333%;
	}
}

/* Grid 4up block */
.g-opposites {
	.gi {
		float: left;

		&:last-child {
			float: right;
			text-align: right;
		}
	}
}
