/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

/* Rem Unit font sizes with relative fallback http:/seesparkbox.com/foundry/scss_rem_mixin_now_with_a_better_fallback
  Usage: @include font-size(1, large);
*/
@mixin font-size( $decimal-size, $keyword: null ) {
  @if $keyword{ font-size: $keyword; }
  @else { font-size: $decimal-size * $base-font-multiplier * 16px;}
  font-size: $decimal-size * 1rem;
}

// ============================================================
//
// @mixin rel()
//
// @param property       : margin-top, border-top-left-radius, padding-bottom, (any property that accepts 1 value)
// @param value          : value in px
// @param context        : relative font size. default: $fontpx
//
//===================================
//
// Example, base font size is 14px:
//
// @include rel(margin-top, 5, $font14);
//  => margin-top: 0.35em;

// @include rel(margin, 16 auto 0 auto, 16);
//  => margin: 1em auto 0 auto;
//
// ============================================================
@mixin rel($property, $value, $context: $fontpx) {
  $length: length($value);
  @if type-of($value) == "number" {
    $value: strip-unit($value);
    #{$property}: ($value/$context + 0em);
  } @else {
    // Create list to append values to.
    $allvalues: ();
    @each $singleValue in $value {
      @if $singleValue == 0 or type-of($singleValue) != "number" {
        // Append 0 as is or strings such as 'auto'.
        $allvalues: append($allvalues, $singleValue);
      } @else {
        $allvalues: append($allvalues, ( strip-unit($singleValue) / $context ) + 0em);
      }
    }
    #{$property}: $allvalues;
  }
}

// ============================================================
//
// @mixin rem($property, $sizeValue)
// -Outputs rem and fallback px values
//
// @param property       : font-size, padding-bottom, (any property that accepts 1 value)
// @param sizeValue      : value in px
//
//===================================
//
// Example, rembase size is 14px:
//
// @include rem('font-size', 16);
//  => font-size: 16px;
//     font-size: 1.14286rem;
//
// ============================================================
@mixin rem($property, $sizeValue: $rembase) {
  $length: length($sizeValue);
  @if type-of($sizeValue) == "number" {
    #{$property}: strip-unit($sizeValue) + px;
    #{$property}: (strip-unit($sizeValue)/$rembase) + rem;
  } @else {
    // Create list to append values to.
    $allvalues: ();
    $allvaluespx: ();
    @each $singleValue in $sizeValue {
      @if $singleValue == 0 or type-of($singleValue) != "number" {
        // Append 0 as is or strings such as 'auto'.
        $allvaluespx: append($allvaluespx, $singleValue);
        $allvalues: append($allvalues, $singleValue);
      } @else {
        $allvaluespx: append($allvaluespx, $singleValue + 0px);
        $allvalues: append($allvalues, ( strip-unit($singleValue) / $rembase) + 0rem);
      }
    }
    #{$property}: $allvaluespx;
    #{$property}: $allvalues;
  }
}

// ============================================================
//
// Convert pixels to rems, with IE fallback using $support.
//
// Example:
//
// .example {
//   width: rem(1); // 16px
// }
// Assumes $rembase is the font-size of <html>
// ============================================================
$supported: true !default;
@function rem($pixels, $support: $supported) {
  @if $support == true {
    @return ($pixels / $rembase) * 1rem;
  }
  @else {
    @return $pixels + 0px;
  }
}

// ============================================================
//
// @source: http://alwaystwisted.com/post.php?s=2013-04-01-my-media-query-mixin
//
// @mixin mq($point, $IE9: false, $query1: min, $query2: width)
// -Outputs media query with fallback no media query support
//
// @param $point       : pixel value for your major or minor breakpoint
// @param $query1      : this is for either min, max, min-device, or max-device defining the first part of the media query. Predefined as min.
// @param $query2      : this if for either width or height defining the second part of the media query. Predefined as max
// @param $IE9         : predefined as false, changing this to true would include the IE9 conditional class of CSS
//
//===================================
//
// Example:
//
// .example {
//   @include mq(320) {
//     width: 100%;
//   }
// }
//
// ============================================================
@mixin mq($point, $query1: min, $query2: width, $IE9: false) {
  @if $IE9 == true{
    .lt-ie9 & {
      @content;
    }
  }
  @media (#{$query1}-#{$query2}: $point) {
    @content;
  }
}

// ============================================================
//
// @mixin triangle()
//
// @param width           :  px, em
// @param height          :  px, em
// @param direction       :  up, down, left, right
// @param color           :  hex, rgb
//
//===================================
//
// Example:
//
// @include triangle(40px, 30px, down, #e88565);
//
// ============================================================
@mixin triangle($width: 20px, $height: 20px, $direction: up, $color: red) {
  @if $direction == "left" {
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-right: $width solid $color;
  }
  @if $direction == "right" {
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-left: $width solid $color;
  }
  //@if $direction == "up" {
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-bottom: $height solid $color;
  //}
  @if $direction == "down" {
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-top: $height solid $color;
  }
  height: 0;
  width: 0;
}

// Mixin for simpler inline-block
// ------------------
@mixin inline-block-ie7 {
  display: inline-block;
  *display: inline;
  *zoom: 1;
}

// Mixin for selection markup
// ------------------
@mixin selection($background, $color, $element:false) {
  @if($element) {
    &::-moz-selection{ background:$background; color:$color; text-shadow:none; }
    &::selection { background:$background; color:$color; text-shadow:none; }
  } @else {
    ::-moz-selection{ background:$background; color:$color; text-shadow:none; }
    ::selection { background:$background; color:$color; text-shadow:none; }
  }
}

// Mixin for reset list
// ------------------
@mixin reset-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Mixin for placeholder styling
// ------------------
@mixin placeHolder($color) {
  &::-webkit-input-placeholder { color:$color; }
  &:-moz-placeholder { color:$color; }
}

// Webkit-style focus
// ------------------
@mixin tab-focus {
  outline: thin dotted #333;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Vertically center an element
// ----------------------------------
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

/* Misc
-----------------------------*/
@mixin divider {
  @include rem(margin-bottom, 30);
  &:after {
    content: '';
    width: 30%;
    display: block;
    @include rel(margin, 16 auto 24);
    border-bottom: 1px solid rgba(black, .1);
  }
}

// convert to em
@function em($target, $context: $fontpx) {
  @if $target == 0 { @return 0 }
  @return $target / $context + 0em;
}

@mixin bg-gradient($height: 150) {
  &:before {
    display: block;
    content: "";
    width: 100%;
    z-index: 0;
    position: absolute;
    bottom: 0;
    left: 0;
    @include rem(height, $height);
    @include background-image(linear-gradient(rgba(black, 0), black 100%));
  }
}

/**
 * Mixin scrollbar
 */
@mixin scrollbar($size, $primary, $secondary: lighten($primary, 25%)) {
  ::-webkit-scrollbar {
    width:  $size;
    height: $size;
  }
  ::-webkit-scrollbar-thumb {
    background: $primary;
  }
  ::-webkit-scrollbar-track {
    background: $secondary;
  }
}

// add css3 prefix
@mixin css3($property, $value) {
  -webkit-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  #{$property}: #{$value};
}
@mixin trans {
  -webkit-transition: all .3s ease-in-out;
  -moz-transition: all .3s ease-in-out;
  -o-transition: all .3s ease-in-out;
  -ms-transition: all .3s ease-in-out;
  transition: all .3s ease-in-out;
}
@mixin no-trans {
  -webkit-transition: none;
  -moz-transition: none;
  -o-transition: none;
  -ms-transition: none;
  transition: none;
}
// Remove the unit from a number
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Spinning loader animation
@mixin spinner($color: $white, $size: 30) {
  margin: 0 auto;
  border: 6px solid rgba($color,.15);
  border-top: 6px solid rgba($color,.8);
  @include rem(height, $size);
  @include rem(width, $size);
  @include border-radius(100%);
  @include animation(rotation .6s infinite linear);
}

// Clearfix
@mixin cf {
  .cf {
    *zoom: 1;
  }
  .cf:before, .cf:after {
    content: " "; // 1
    display: table; // 2
  }

  .cf:after {
    clear: both;
  }
}

@mixin v-center {
  @include flexbox;
  @include align-items(center);
}
@mixin vh-center {
  @include v-center;
  @include justify-content(center);
}

@mixin vertical-align {
  position: relative;
  top: 50%;
  @include transform(translateY(-50%));
}

// Table layout
@mixin table {
  display: table;
  width: 100%;
}
@mixin t-cell {
  display: table-cell;
  width: 50%;
}
@mixin table-layout($left-width: 40%, $right-width: 60%) {
  .b-inner {
    @include table;
    overflow: visible;
  }
  .b-thumb {
    @include t-cell;
    width: $left-width;
    padding: 0;
  }
  .b-text {
    @include t-cell;
    width: $right-width;
    text-align: left;
    vertical-align: middle;
    padding: 0 0 0 $pad;
  }
}

// Grid with 4 items with custom breakpoints
@mixin g-4up($bp1: $bp-med, $bp2: $bp-large) {
  // Layout:
  // []
  // []
  // []
  // []
  @include mq($bp1) {
    // Layout:
    // [][]
    // [][]
    > .gi {
      float: left;
      width: 50%;
      &:nth-of-type(2n+1) {
        clear: both;
      }
    }
  }
  @include mq($bp2) {
    // Layout: [][][][]
    > .gi {
      width: 25%;
      &:nth-of-type(2n+1) {
        clear: none;
      }
      &:nth-of-type(4n+1) {
        clear: left;
      }
    }
  }
}

// 4-up for shifting to 4 across early. Works best with vertical images.
@mixin g-4up-early-break($bp1: $micro-break, $bp2: $large-break) {
  > .gi {
    // Layout:
    // [][]
    // [][]
    float: left;
    width: 50%;
    margin-bottom: $space;
    &:nth-of-type(2n+1) {
      clear: both;
    }
  }
  .b-thumb {
    margin-bottom: rem(4);
  }
  .b-title {
    font-size: rem(18);
  }
  @include mq($bp1) {
    // Layout: [][][][]
    > .gi {
      width: 25%;
      margin-bottom: 0;
      padding-bottom: 0;
      &:nth-of-type(2n+1) {
        clear: none;
      }
      &:nth-of-type(4n+1) {
        clear: left;
      }
    }
    .b-title {
      font-size: rem(16);
    }
  }
  @include mq($bp2) {
    .b-title {
      font-size: rem(18);
    }
  }
}

// Fixed transparent 100% width and height
@mixin overlay {
  position: fixed;
  background-color: $black;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  z-index: -1;
  background-color: rgba($black, 0);
  @include trans;
}

// Better underlines
@mixin underline($color: $gray, $line-offset: 1.13, $line-size: 0.1) {
  background-repeat: repeat-x;
  background-size: #{$line-size}em #{$line-size}em;
  background-position: 0 #{$line-offset}em;
  text-decoration: none;
  // keep the background-image in here directly for browsers that don't animate
  @include background-image(linear-gradient(top, transparent 50%, $color 50%));
  .lt-ie10 & { // because old IE can't handle it
    background: none;
    text-decoration: underline;
  }
}

// Triangles
@mixin triangle($dir, $size, $color) {
  border: $size transparent solid;
  @if ($dir == "top" or $dir == "up" or $dir == "left" or $dir == "before") {
    @if ($dir == "top" or $dir == "up") {
      border-bottom-color: $color;
    }
    @else if ($dir == "right" or $dir == "after") {
      border-left-color: $color;
    }
  }
  @else if ($dir == "bottom" or $dir == "down" or $dir == "left" or $dir == "before") {
    @if ($dir == "bottom" or $dir == "down") {
      border-top-color: $color;
    }
    @else if ($dir == "left" or $dir == "before") {
      border-right-color: $color;
    }
  }
}

// General Text Styles
@mixin text-styles {
  color: $gray-dark-2;
  font-family: $serif;
  line-height: 1.7;
  font-size: rem(18);
  @include mq($medium-break) {
    line-height: 1.5;
  }
  a {
    color: $blue-light;
  }
  a:hover {
    @include underline;
  }
}
